#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SecretNumber(u64);

fn main() {
    let secrets: Vec<u64> = std::fs::read_to_string("src/inputs/input-day22.txt")
        .unwrap()
        .lines()
        .map(|l| l.to_string().parse::<u64>().unwrap())
        .collect();

    let secrets_sum = part1(&secrets);
    println!(
        "The sum of the 2000th secret number generated by each buyer is {}",
        secrets_sum
    );
}

fn part1(secrets: &Vec<u64>) -> u64 {
    secrets
        .iter()
        .map(|n| {
            let mut init = SecretNumber(*n);
            for _ in 0..2000 {
                let r = generate_next_number(init.clone());
                init = r;
            }
            init.0
        })
        .sum()
}

fn generate_next_number(s: SecretNumber) -> SecretNumber {
    let r1 = step1(s);
    let r2 = step2(r1);
    step3(r2)
}

fn step1(s: SecretNumber) -> SecretNumber {
    let r1 = s.0 * 64;
    let r2 = mix(s, r1);
    prune(r2)
}

fn step2(s: SecretNumber) -> SecretNumber {
    let r1 = s.0 / 32;
    let r2 = mix(s, r1);
    prune(r2)
}

fn step3(s: SecretNumber) -> SecretNumber {
    let r1 = s.0 * 2048;
    let r2 = mix(s, r1);
    prune(r2)
}

fn mix(s: SecretNumber, v: u64) -> SecretNumber {
    SecretNumber(v ^ s.0)
}

fn prune(s: SecretNumber) -> SecretNumber {
    SecretNumber(s.0 % 16777216)
}
